@model Ocean2Ocean.DataAccess.Journey
@{
    ViewData["Title"] = "Home Page";
}

<script src="https://api.mapbox.com/mapbox-gl-js/v1.10.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v1.10.1/mapbox-gl.css" rel="stylesheet" />
<script src='https://unpkg.com/@@turf/turf/turf.min.js'></script>
<script src="~/js/route.js" asp-append-version="true"></script>

<style>
    #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
    }

    .legend {
        background-color: white;
        border-radius: 5px;
    }
</style>
<div id="map"></div>
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<div class="container-fluid">
    <div class="row">
        <div class="col-auto">

        </div>
        <div class="col-auto legend mt-3">
            <h1 class="display-4 pt-3">
                🏃 Add Your Steps
            </h1>
            <p id="stats" class="card-subtitle text-center pb-4"></p>
            <div class="progress">
                <div class="progress-bar progress-bar-striped bg-success" role="progressbar" id="progressbar" aria-valuenow="42" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <p id="progresslabel" class="text-center"></p>
            <form method="get" autocomplete="on">
                @{
                    if (!(string.IsNullOrWhiteSpace(Model.JourneyName)))
                    {
                        <div class="form-group">
                            <label for="exampleInputEmail1">Journey Name</label>
                            <input type="text" name="journeyName" class="form-control" id="journeyName" aria-describedby="journeyName" placeholder="Enter a Name for this Journey" value="@Model?.JourneyName" readonly>
                            @*<small id="emailHelp" class="form-text text-muted">What does your team call this event?</small>*@
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <label for="exampleInputEmail1">Journey Name</label>
                            <input type="text" name="journeyName" class="form-control" id="journeyName" aria-describedby="journeyName" placeholder="Enter a Name for this Journey">
                            <small id="emailHelp" class="form-text text-muted">What does your team call this event?</small>
                        </div>
                    }
                }
                <div class="form-group">
                    <label for="exampleInputEmail1">Your Nickname</label>
                    <input type="text" name="email" class="form-control" id="nickname" aria-describedby="nickname" placeholder="Enter a Nickname" value="@Model?.Step?.Email">
                    <small id="emailHelp" class="form-text text-muted">We never store personally identifying information.</small>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="exampleInputPassword1">Your Steps</label>
                            <input type="number" name="steps" class="form-control" id="exampleInputPassword1" placeholder="0" value="@Model?.Step?.Steps">
                            <small id="emailHelp" class="form-text text-muted">1 Mile is about 2000 steps.</small>
                            <input type="number" id="stepsTaken" name="stepsTaken" hidden />
                            <input type="number" id="stepsInRoute" name="stepsInRoute" hidden />
                        </div>
                    </div>
                    <div class="col">
                        <label for="dailyGoal">⭐ Daily Goal</label>
                        <input type="number" name="steps" class="form-control" id="dailyGoal" value="5000" readonly>
                        <small id="dailyGoalHelp" class="form-text text-muted">Meet this goal to win a star!</small>
                    </div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-lg" asp-action="AddSteps" asp-route-journeyName="@Model?.JourneyName">🚀 Submit</button>
                    @{
                        if (!(string.IsNullOrWhiteSpace(Model.JourneyName)))
                        {
                            <a class="btn btn-success btn-lg" href="/Home/Leaderboard/@Model?.JourneyName">🌠 Leaderboard</a>
                        }
                        else
                        {
                            <a class="btn btn-success btn-lg disabled" href="/Home/Leaderboard/@Model?.JourneyName">🌠 Leaderboard</a>
                        }
                    }
                    <a class="btn btn-info btn-lg" href="https://github.com/uncheckederror/Ocean2Ocean" target="_blank">👓 Github</a>
                </div>
            </form>
        </div>
    </div>
</div>
<script>

    // Source: http://www.mredkj.com/javascript/numberFormat.html
    function addCommas(nStr) {
        nStr += '';
        x = nStr.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
            x1 = x1.replace(rgx, '$1' + ',' + '$2');
        }
        return x1 + x2;
    }

    mapboxgl.accessToken = '@Model?.MapboxAccessToken';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [-97, 50],
        zoom: 4
    });

    var stepsTaken = @Model?.StepsTaken;

    // Calculate the distance in kilometers between route start/end point.
    var line = turf.lineString(route);
    var lengthMiles = turf.length(line, { units: 'miles' });
    document.getElementById("stats").innerHTML += addCommas(Math.round(lengthMiles)) + " Miles";

    var lengthKilometers = turf.length(line, { units: 'kilometers' });
    document.getElementById("stats").innerHTML += " &#8226; " + addCommas(Math.round(lengthKilometers)) + " Kilometers";

    // sourced from https://www.chparks.com/411/How-To-Measure-Steps
    // 2k miles per step
    var totalStepsUnrounded = lengthMiles * 2000;
    console.log("totalStepsUnrounded: " + totalStepsUnrounded);
    var totalSteps = Math.round(totalStepsUnrounded);
    console.log("totalSteps: " + totalSteps);
    document.getElementById("stats").innerHTML += " &#8226; " + addCommas(totalSteps) + " Steps";
    document.getElementById("stepsInRoute").value = totalSteps;
    document.getElementById("stepsTaken").value = stepsTaken;

    // Calculate the distance traveled.
    var milesFromSteps = stepsTaken / 2000;
    console.log("milesFromSteps: " + milesFromSteps);
    var start = 0;
    var stop = milesFromSteps;
    var routeTraveled = turf.lineSliceAlong(line, start, stop, { units: 'miles' });
    console.log(routeTraveled);

    // Calculate the distance remaining.
    var milesFromSteps = stepsTaken / 2000;
    var start = milesFromSteps;
    var stop = lengthMiles;
    var routeRemaining = turf.lineSliceAlong(line, start, stop, { units: 'miles' });
    console.log(routeTraveled);

    // Get the point for the marker Icon
    var options = { units: 'miles' };
    var along = turf.along(line, milesFromSteps, options);

    // Set the progress bar
    var progressbarWidth = Math.round((stepsTaken / totalSteps) * 100);
    console.log(progressbarWidth);
    document.getElementById("progressbar").style.width = progressbarWidth + "%";
    document.getElementById("progresslabel").innerHTML += "~" + progressbarWidth + "% Complete &#8226; " + addCommas(stepsTaken) + " Steps";

    map.on('load', function () {

        map.addSource('routeTraveled', {
            'type': 'geojson',
            'data': {
                'type': 'Feature',
                'properties': {},
                'geometry': {
                    'type': 'LineString',
                    'coordinates': routeTraveled.geometry.coordinates
                }
            }
        });

        map.addLayer({
            'id': 'routeTraveled',
            'type': 'line',
            'source': 'routeTraveled',
            'layout': {
                'line-join': 'round',
                'line-cap': 'round'
            },
            'paint': {
                'line-color': '#ff0000',
                'line-width': 5,
                'line-opacity': 0.8
            }
        });

        map.addSource('route', {
            'type': 'geojson',
            'data': {
                'type': 'Feature',
                'properties': {},
                'geometry': {
                    'type': 'LineString',
                    'coordinates': routeRemaining.geometry.coordinates
                }
            }
        });

        map.addLayer({
            'id': 'route',
            'type': 'line',
            'source': 'route',
            'layout': {
                'line-join': 'round',
                'line-cap': 'round'
            },
            'paint': {
                'line-color': '#0075ff',
                'line-width': 5,
                'line-opacity': 0.8
            }
        });

        map.loadImage(
            './wagon.png',
            function (error, image) {
                if (error) throw error;
                map.addImage('wagon', image);
                map.addSource('point', {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': [
                            {
                                'type': 'Feature',
                                'geometry': {
                                    'type': 'Point',
                                    'coordinates': along.geometry.coordinates
                                }
                            }
                        ]
                    }
                });
                map.addLayer({
                    'id': 'points',
                    'type': 'symbol',
                    'source': 'point',
                    'layout': {
                        'icon-image': 'wagon',
                        'icon-size': 0.2
                    }
                });
            }
        );
    });
</script>