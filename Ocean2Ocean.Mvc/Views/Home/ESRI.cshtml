@model Ocean2Ocean.DataAccess.Journey
@{
    ViewData["Title"] = "Journey";
}

<script src='https://unpkg.com/@@turf/turf/turf.min.js'></script>
<script src="~/js/route.js" asp-append-version="true"></script>
<link rel="stylesheet" href="https://js.arcgis.com/4.15/esri/themes/light/main.css">
<script src="https://js.arcgis.com/4.15/"></script>

<style>
    html, body, #viewDiv {
        padding: 0;
        margin: 0;
        height: 100vh;
        width: 100%;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-md-4">
            <div class="container">
                <div class="legend pl-3">
                    <h1 class="display-4 pt-3">
                        🏃 Add Your Steps
                    </h1>
                    <p id="stats" class="card-subtitle text-center pb-4"></p>
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped bg-success" role="progressbar" id="progressbar" aria-valuenow="42" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                    <p id="progresslabel" class="text-center"></p>
                    <hr />
                    @{
                        if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
                        {
                        <div class="alert alert-danger" role="alert">
                            @Model.ErrorMessage
                        </div>
                        <a class="btn btn-success btn-block" href="/Home/Journeys">🔍 Find Your Journey</a>
                        }
                    }
                    <form method="get" autocomplete="on">
                        @{
                            if (!(string.IsNullOrWhiteSpace(Model.JourneyName)))
                            {
                            <div class="form-group">
                                <label for="exampleInputEmail1">Journey Name</label>
                                <input type="text" name="journeyName" class="form-control" id="journeyName" aria-describedby="journeyName" placeholder="Enter a Name for this Journey" value="@Model?.JourneyName" readonly>
                            </div>
                            }
                            else
                            {
                            <div class="form-group">
                                <label for="exampleInputEmail1">Journey Name</label>
                                <input type="text" name="journeyName" class="form-control" id="journeyName" aria-describedby="journeyName" placeholder="Enter a Name for this Journey (SE Walk Across America)" required>
                                <small id="emailHelp" class="form-text text-muted">What does your team call this event?</small>
                            </div>
                            }
                        }
                        <div class="form-group">
                            <label for="exampleInputEmail1">Your Nickname</label>
                            <input type="text" name="email" class="form-control" id="nickname" aria-describedby="nickname" placeholder="Enter a Nickname (or leave blank)" value="@Model?.Step?.Nickname">
                            <small id="emailHelp" class="form-text text-muted">We never store personally identifying information.</small>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label for="exampleInputPassword1">Your Steps</label>
                                    <input type="number" name="steps" class="form-control" id="exampleInputPassword1" placeholder="0" value="@Model?.Step?.Steps" required>
                                    <small id="emailHelp" class="form-text text-muted">1 Mile is about 2000 steps.</small>
                                    <input type="number" id="stepsTaken" name="stepsTaken" hidden />
                                    <input type="number" id="stepsInRoute" name="stepsInRoute" hidden />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary" asp-action="AddSteps" asp-route-journeyName="@Model?.JourneyName">🚀 Submit</button>
                            @{
                                if (!(string.IsNullOrWhiteSpace(Model.JourneyName)))
                                {
                                <a class="btn btn-success" href="/Home/Leaderboard/@Model?.JourneyName">🌠 Leaderboard</a>
                                }
                                else
                                {
                                <a class="btn btn-success disabled" href="/Home/Leaderboard/@Model?.JourneyName">🌠 Leaderboard</a>
                                }
                            }
                            <a class="btn btn-info" href="https://github.com/uncheckederror/Ocean2Ocean" target="_blank">👓 Github</a>
                        </div>
                    </form>
                </div>
                <div class="pl-3 pb-3">
                    <div id="pageId" hidden></div>
                    <hr />
                    <div class="card">
                        <div class="card-header">
                            🎡 Roadside Attractions
                        </div>
                        <div class="card-body">
                            <h5 class="card-title" id="roadsidetitle">Welcome to</h5>
                            @*<p class="card-text">Lookout Pass is a mountain pass in the Rocky Mountains of the northwestern United States. In the Coeur d'Alene Mountains of the Bitterroot Range, the pass is on the border between Idaho and Montana, traversed by Interstate 90 (formerly U.S. Route 10)[1] at an elevation of 4,710 feet (1,436 m) above sea level.</p>*@
                            <a class="btn btn-info" id="roadsidelink" href="" target="_blank noreferrer">Learn More</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-8">
            <div id="viewDiv"></div>
        </div>
    </div>
</div>
<script>

    require([
        "esri/Map",
        "esri/views/MapView",
        "esri/Graphic",
        "esri/layers/GraphicsLayer"
    ], function (Map, MapView, Graphic, GraphicsLayer) {

        var map = new Map({
            basemap: "topo-vector"
        });

        var graphicsLayer = new GraphicsLayer();
        map.add(graphicsLayer);

        // Create a point
        var point = {
            type: "point",
            longitude: routeRemaining.geometry.coordinates[0][0],
            latitude: routeRemaining.geometry.coordinates[0][1]
        };

        var simpleMarkerSymbol = {
            type: "simple-marker",
            color: [226, 119, 40],  // orange
            outline: {
                color: [255, 255, 255], // white
                width: 1
            }
        };

        var pointGraphic = new Graphic({
            geometry: point,
            symbol: simpleMarkerSymbol
        });

        graphicsLayer.add(pointGraphic);

        // Create a line geometry for the route traveled.
        var simpleLineSymbol = {
            type: "simple-line",
            color: [255, 0, 0], // #ff0000
            width: 3
        };

        var polyline = {
            type: "polyline",
            paths: routeTraveled.geometry.coordinates
        };

        var polylineGraphic = new Graphic({
            geometry: polyline,
            symbol: simpleLineSymbol
        })

        graphicsLayer.add(polylineGraphic);

        // Create a line geometry for the route remaining.
        var simpleLineSymbolRemaining = {
            type: "simple-line",
            color: [0, 117, 255], // #ff0000
            width: 3
        };

        var polylineRemaining = {
            type: "polyline",
            paths: routeRemaining.geometry.coordinates
        };

        var polylineGraphicRemaining = new Graphic({
            geometry: polylineRemaining,
            symbol: simpleLineSymbolRemaining
        })

        graphicsLayer.add(polylineGraphicRemaining);

        var view = new MapView({
            container: "viewDiv",
            map: map,
            center: point,
            zoom: 12
        });

    });
</script>


<script>
        // Source: http://www.mredkj.com/javascript/numberFormat.html
        function addCommas(nStr) {
            nStr += '';
            x = nStr.split('.');
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + ',' + '$2');
            }
            return x1 + x2;
        }

        var stepsTaken = @Model?.StepsTaken;

        // Calculate the distance in kilometers between route start/end point.
        var line = turf.lineString(route);
        var lengthMiles = turf.length(line, { units: 'miles' });
        document.getElementById("stats").innerHTML += addCommas(Math.round(lengthMiles)) + " Miles";

        var lengthKilometers = turf.length(line, { units: 'kilometers' });
        document.getElementById("stats").innerHTML += " &#8226; " + addCommas(Math.round(lengthKilometers)) + " Kilometers";

        // sourced from https://www.chparks.com/411/How-To-Measure-Steps
        // 2k miles per step
        var totalStepsUnrounded = lengthMiles * 2000;
        console.log("totalStepsUnrounded: " + totalStepsUnrounded);
        var totalSteps = Math.round(totalStepsUnrounded);
        console.log("totalSteps: " + totalSteps);
        document.getElementById("stats").innerHTML += " &#8226; " + addCommas(totalSteps) + " Steps";
        document.getElementById("stepsInRoute").value = totalSteps;
        document.getElementById("stepsTaken").value = stepsTaken;

        // Calculate the distance traveled.
        var milesFromSteps = stepsTaken / 2000;
        console.log("milesFromSteps: " + milesFromSteps);
        var start = 0;
        var stop = milesFromSteps;
        var routeTraveled = turf.lineSliceAlong(line, start, stop, { units: 'miles' });
        console.log(routeTraveled);

        // Calculate the distance remaining.
        var milesFromSteps = stepsTaken / 2000;
        var start = milesFromSteps;
        var stop = lengthMiles;
        var routeRemaining = turf.lineSliceAlong(line, start, stop, { units: 'miles' });
        console.log(routeTraveled);

        // Get the point for the marker Icon
        var options = { units: 'miles' };
        var along = turf.along(line, milesFromSteps, options);

        // Set the progress bar
        var progressbarWidth = Math.round((stepsTaken / totalSteps) * 100);
        console.log(progressbarWidth);
        document.getElementById("progressbar").style.width = progressbarWidth + "%";
        document.getElementById("progresslabel").innerHTML += "~" + progressbarWidth + "% Complete &#8226; " + addCommas(stepsTaken) + " Steps";
</script>
<script>
    /*
geocoordinates.js

MediaWiki API Demos
Demo of `Geosearch` module: Obtain coordinates for wiki pages nearby

MIT License
*/
    var wikiLat = routeRemaining.geometry.coordinates[0][1].toFixed(7);
    var wikiLong = routeRemaining.geometry.coordinates[0][0].toFixed(7);

    var url = "https://en.wikipedia.org/w/api.php";

    var params = {
        action: "query",
        format: "json",
        list: "geosearch",
        gscoord: wikiLat + "|" + wikiLong,
        gsradius: 10000,
        gslimit: 1
    };

    url = url + "?origin=*";
    Object.keys(params).forEach(function (key) { url += "&" + key + "=" + params[key]; });

    console.log(url);

    fetch(url)
        .then(function (response) { return response.json(); })
        .then(function (response) {
            console.log(response);
            console.log(response.query.geosearch[0].pageid)
            var articleLink = "https://en.wikipedia.org/?curid=" + response.query.geosearch[0].pageid;
            document.getElementById("roadsidelink").href = articleLink;
            document.getElementById("roadsidetitle").innerText += " " + response.query.geosearch[0].title + "!";
        })
        .catch(function (error) { console.log(error); });

    //https://en.wikipedia.org/wiki/Special:ApiSandbox#action=query&format=json&prop=extracts&pageids=8071949&exsentences=2&exintro=1

    //var PageId = document.getElementById("pageId").innerText;
    //console.log(newUrl);

    //var newParams = {
    //    action: "query",
    //    format: "json",
    //    prop: "extracts",
    //    pageids: PageId,
    //    exsentences: 2,
    //    exintro: 1
    //};

    //var newUrl = "https://en.wikipedia.org/w/api.php";

    //newUrl = newUrl + "?origin=*";
    //Object.keys(newParams).forEach(function (key) { newUrl += "&" + key + "=" + newParams[key]; });

    //console.log(newUrl);

    //fetch(newUrl)
    //    .then(function (response) { return response.json(); })
    //    .then(function (response) {
    //        console.log(response);
    //    })
    //    .catch(function (error) { console.log(error); });

</script>